$date
  Mon May  8 14:20:02 2023
$end
$version
  PyMTL 3 (Mamba)
$end
$timescale
 10ps
$end

$scope module top $end
  $var reg 1 % reset $end
  $var reg 1 $ clk $end
  $scope module src $end
    $var reg 1 $ clk $end
    $var reg 1 " send.rdy $end
    $var reg 1 # send.val $end
    $var reg 1 % reset $end
    $var reg 129 * send.msg $end
  $upscope $end
  $scope module sink $end
    $var reg 1 - recv.val $end
    $var reg 1 % reset $end
    $var reg 1 $ clk $end
    $var reg 1 & recv.rdy $end
    $var reg 129 ) recv.msg $end
  $upscope $end
  $scope module memmodel $end
    $var reg 129 * istream.msg $end
    $var reg 1 # istream.val $end
    $var reg 129 ) ostream.msg $end
    $var reg 1 $ clk $end
    $var reg 1 / in_flight $end
    $var reg 1 - ostream.val $end
    $var reg 1 " istream.rdy $end
    $var reg 1 0 memsystem_rdy $end
    $var reg 1 & ostream.rdy $end
    $var reg 32 1 rtl_clk_cycles $end
    $var reg 1 % reset $end
    $scope module queue2 $end
      $var reg 1 - send.val $end
      $var reg 1 $ clk $end
      $var reg 1 - count $end
      $var reg 129 , recv.msg $end
      $var reg 1 . recv.rdy $end
      $var reg 1 & send.rdy $end
      $var reg 1 % reset $end
      $var reg 1 ! recv.val $end
      $var reg 129 ) send.msg $end
      $scope module q $end
        $var reg 1 - count $end
        $var reg 1 ! recv.val $end
        $var reg 1 - full $end
        $var reg 129 , recv.msg $end
        $var reg 129 ) send.msg $end
        $var reg 1 $ clk $end
        $var reg 1 % reset $end
        $var reg 1 - send.val $end
        $var reg 129 ) entry $end
        $var reg 1 . recv.rdy $end
        $var reg 1 & send.rdy $end
      $upscope $end
    $upscope $end
    $scope module queue1 $end
      $var reg 1 $ clk $end
      $var reg 1 + send.rdy $end
      $var reg 129 * recv.msg $end
      $var reg 1 % reset $end
      $var reg 1 ' count $end
      $var reg 1 # recv.val $end
      $var reg 129 ( send.msg $end
      $var reg 1 " recv.rdy $end
      $var reg 1 ' send.val $end
      $scope module q $end
        $var reg 1 % reset $end
        $var reg 1 ' send.val $end
        $var reg 129 ( entry $end
        $var reg 1 " recv.rdy $end
        $var reg 1 + send.rdy $end
        $var reg 129 * recv.msg $end
        $var reg 1 ' count $end
        $var reg 1 $ clk $end
        $var reg 1 ' full $end
        $var reg 129 ( send.msg $end
        $var reg 1 # recv.val $end
      $upscope $end
    $upscope $end
  $upscope $end
$upscope $end
$enddefinitions $end

b0b0 !
b0b0 "
b0b0 #
b0b0 $
b0b0 %
b0b0 &
b0b0 '
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 )
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 *
b0b0 +
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ,
b0b0 -
b0b0 .
b0b0 /
b0b0 0
b0b00000000000000000000000000000000 1

#0
b0b1 $

b0b1 "
b0b1 %
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (
b0b0 +
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ,
b0b0 -
b0b1 .
b0b00000000000000000000000000000000 1

#50
b0b0 $
#100
b0b1 $

b0b1 0

#150
b0b0 $
#200
b0b1 $


#250
b0b0 $
#300
b0b1 $

b0b0 %

#350
b0b0 $
#400
b0b1 $

b0b00000000000000000000000000000001 1

#450
b0b0 $
#500
b0b1 $

b0b00000000000000000000000000000010 1

#550
b0b0 $
#600
b0b1 $

b0b00000000000000000000000000000011 1

#650
b0b0 $
#700
b0b1 $

b0b1 #
b0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 *
b0b00000000000000000000000000000100 1

#750
b0b0 $
#800
b0b1 $

b0b0 "
b0b1 '
b0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 (
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 *
b0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 ,
b0b00000000000000000000000000000000 1

#850
b0b0 $
#900
b0b1 $

b0b1 !
b0b1 &
b0b1 +
b0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 ,
b0b1 /
b0b00000000000000000000000000000001 1

#950
b0b0 $
#1000
b0b1 $

b0b0 !
b0b1 "
b0b0 '
b0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 )
b0b0 +
b0b1 -
b0b0 .
b0b0 /
b0b00000000000000000000000000000010 1

#1050
b0b0 $
#1100
b0b1 $

b0b0 "
b0b0 #
b0b1 '
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 (
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 ,
b0b0 -
b0b1 .
b0b00000000000000000000000000000011 1

#1150
b0b0 $
#1200
b0b1 $

b0b1 !
b0b1 +
b0b1 /
b0b00000000000000000000000000000100 1

#1250
b0b0 $
#1300
b0b1 $

b0b0 !
b0b1 "
b0b0 '
b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001 )
b0b0 +
b0b1 -
b0b0 .
b0b0 /
b0b00000000000000000000000000000000 1

#1350
b0b0 $
#1400
b0b1 $

b0b0 &
b0b0 -
b0b1 .
b0b00000000000000000000000000000001 1

#1450
b0b0 $
#1500
b0b1 $

b0b00000000000000000000000000000010 1

#1550
b0b0 $
#1600
b0b1 $

b0b00000000000000000000000000000011 1

#1650
b0b0 $
#1700
b0b1 $

b0b00000000000000000000000000000100 1

#1750
b0b0 $
#1800
b0b1 $

b0b00000000000000000000000000000000 1

#1850
b0b0 $
#1900
b0b1 $

